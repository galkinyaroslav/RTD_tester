"""create last_run and measurements tables

Revision ID: 4b2b5a85ba6c
Revises: 
Create Date: 2025-10-14 00:03:27.893587

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4b2b5a85ba6c'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    last_run = op.create_table('last_run',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('last_run', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_last_run_id'), 'last_run', ['id'], unique=False)

    op.execute("""
        CREATE OR REPLACE FUNCTION enforce_single_row()
        RETURNS TRIGGER AS $$
        BEGIN
            IF (SELECT COUNT(*) FROM last_run) >= 1 THEN
                RAISE EXCEPTION 'Table last_run can contain only one record';
            END IF;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """)

    # Создаём триггер
    op.execute("""
        CREATE TRIGGER last_run_single_row
        BEFORE INSERT ON last_run
        FOR EACH ROW
        EXECUTE FUNCTION enforce_single_row();
    """)

    op.bulk_insert(
        last_run,
        [{'last_run': 0}],
    )


    op.create_table('measurements',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('run_id', sa.Integer(), nullable=False),
    sa.Column('measure_datetime', sa.TIMESTAMP(), nullable=False),
    sa.Column('t201', sa.Float(), nullable=True),
    sa.Column('t202', sa.Float(), nullable=True),
    sa.Column('t203', sa.Float(), nullable=True),
    sa.Column('t204', sa.Float(), nullable=True),

    sa.Column('t205', sa.Float(), nullable=True),

    sa.Column('t206', sa.Float(), nullable=True),

    sa.Column('t207', sa.Float(), nullable=True),
    sa.Column('t208', sa.Float(), nullable=True),
    sa.Column('t209', sa.Float(), nullable=True),
    sa.Column('t210', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_measurements_id'), 'measurements', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_measurements_id'), table_name='measurements')
    op.drop_table('measurements')
    op.drop_index(op.f('ix_last_run_id'), table_name='last_run')
    op.drop_table('last_run')
    # ### end Alembic commands ###

